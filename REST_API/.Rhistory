#Extract metadata and distance matrix from phyloseq object
metada <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Convert QIIME2 artifacts and metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Extract metadata and distance matrix from phyloseq object
metada <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
distance_matrix <- distance(phy, method="bray")
require(vegan)
require(phyloseq)
require(dendextend)
require(devtools)
require(qiime2R)
#Convert QIIME2 artifacts and metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Extract metadata and distance matrix from phyloseq object
metada <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
distance_matrix <- distance(phy, method="bray")
View(metada)
View(phy)
help("hclust")
help("as.dendogram")
#Convert QIIME2 artifacts and metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Extract metadata and distance matrix from phyloseq object
metada <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
distance_matrix <- distance(phy, method="bray")
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendogram(bray.clust, hang=0.1)
require(vegan)
require(phyloseq)
require(dendextend)
require(devtools)
require(qiime2R)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendogram(bray.clust, hang=0.1)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendogram(bray.clust, hang=0.1)
require(dendextend)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendogram(bray.clust, hang=0.1)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray.clust, hang=0.1)
?as.dendrogram
require(stats)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray.clust, hang=0.1)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
#Convert QIIME2 artifacts and metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Extract metadata and distance matrix from phyloseq object
metadata <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
distance_matrix <- distance(phy, method="bray")
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
View(metada)
match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') )
metadata_tsv=file.path(scripts_folder, "samples.txt")
metadata_tsv
View(metada)
metadata <- data.frame(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
metadata
#Convert QIIME2 artifacts and metadata to phyloseq
phy <- qza_to_phyloseq(table_qza, rooted_tree_qza, taxonomy_qza, metadata_tsv)
#Extract metadata and distance matrix from phyloseq object
metadata <- data.frame(sample_data(phy))
distance_matrix <- distance(phy, method="bray")
help("sample_data")
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
#Hierarchical cluster analysis on a set of dissimilarities and methods for analysing
bray_clust <- hclust(distance_matrix, method="ward.D")
bray_dend <- as.dendrogram(bray_clust, hang=0.1)
colour_labels <- c('red','green','blue')[ match(as.factor(metadata$group),
c('frue_ch','mtca_au','ukul_za') ) ]
labels_colors(bray_dend) <- colour_labels
plot(bray_dend, main="Samples dendrogram", ylab="Distances")
legend("topright",
legend=c('frue_ch','mtca_au','ukul_za'),
col=c('red','green','blue'),
bty="n",lty=1, cex=0.8)
# Run PERMANOVA
adonis2(distance_matrix ~ group, data = metadata, permutations=100000)
help("adonis2")
sessionInfo()
help(sessionInfo)
help(cim)
help("barplot")
help("train")
model.fit.knn <- train(log10(CFC)~., method = "knn", data = trainSet, tuneGrid = expand.grid(k=1:20))
BiocManager::install("mixOmics")
install.packages("rgl")
install.packages("matlab")
install.packages("R.matlab")
install.packages("ptw")
install.packages("dplyr")
install.packages("class")
install.packages("gmodels")
install.packages("caret")
require("mixOmics")
require("rgl")
require("matlab")
require("R.matlab")
require("ptw")
require("dplyr")counts
require("mixOmics")
require("rgl")
require("matlab")
require("R.matlab")
require("ptw")
require("dplyr")
require("class")
require("gmodels")
require("caret")
require("rpart")
require("rpart.plot")
require("kernlab")
require("MASS")
enose <- read.table('C:/Users/marie/Documents/Cranfield/Machine Learning_Metabolomics/Practicals/Practical3/EnoseAllSamples.csv', sep = ",", header = TRUE, row.names = 1)
counts <- read.table('C:/Users/marie/Documents/Cranfield/Machine Learning_Metabolomics/Practicals/Practical3/MicroCounts.csv', sep = ",", header = TRUE, row.names = 1)
#Combine all rows from both csv
merged <- merge(enose, counts, by = "row.names")
rownames(merged) = merged[,1]
# Remove raw names from merged column
AllData <- as.data.frame(merged[,-1])
counts <- AllData$CFC
#AllData$counts <- factor(AllData$counts, levels = c("1", "2", "3"))
Sensors <- colnames(AllData)
Samples <- rownames(AllData)
hist(log(counts), breaks = 50)
boxplot(log(counts), xlab = "Log counts")
#AllData$CFC <- log10(AllData$CFC)
set.seed(8)
#Preserve correspondance between numerical and categorical data (predictor and response respectively)
trainIndex <- createDataPartition(AllData$CFC, p = .7,
list = FALSE,
times = 1)
trainSet <- AllData[trainIndex,]; testSet <- AllData[-trainIndex,]
#2 vectors containing test and train
trainCl <- as.factor(trainSet[, ncol(trainSet)])
testCl <- as.factor(testSet[, ncol(testSet)])
model.fit <- lm(formula = CFC~., data = trainSet)
# View summary
summary(model.fit)
model.fit.log <- lm(formula = log10(CFC)~., data = trainSet)
# View summary
summary(model.fit.log)
AllData$CFC <- log10(AllData$CFC)
varImportance <-
varImp(model.fit.log)
varImportance
predict.model <- predict(model.fit.log, testSet, type = "response")
plot(predict.model, log10(testSet$CFC), ylab = "Predicted")
obs.predict.df <- data.frame(predict.model, log10(testSet$CFC))
colnames(obs.predict.df) <- c("obs", "pred")
RMSE <- RMSE(obs.predict.df$obs, obs.predict.df$pred)
RMSE
model.fit.log.selected <- lm(formula = log10(CFC)~DF6+DF1+DF5+DF7+DF8, data = trainSet)
predict.sel <- predict(model.fit.log.selected, testSet, type = "response")
RMSE.sel <- RMSE(predict.sel, log10(testSet$CFC))
RMSE.sel
model.fit.StepAIC <- train(CFC~., method = "lmStepAIC", data = trainSet)
model.fit.knn <- train(log10(CFC)~., method = "knn", data = trainSet, tuneGrid = expand.grid(k=1:20))
predict.knn <- predict(model.fit.knn, testSet)
df.predict.knn <- data.frame(predict.knn, log10(testSet$CFC))
RMSE.knn <- RMSE(predict.knn, log10(testSet$CFC))
RMSE.knn
plot(model.fit.knn)
model.fit.knn <- train(log10(CFC)~., method = "knn", data = trainSet, tuneGrid = expand.grid(k=1:20))
summary(model.fit)
summary(model.fit.knn)
predict.knn <- predict(model.fit.knn, testSet)
df.predict.knn <- data.frame(predict.knn, log10(testSet$CFC))
RMSE.knn <- RMSE(predict.knn, log10(testSet$CFC))
RMSE.knn
plot(model.fit.knn)
df.predict.knn
predict.knn
RMSE.knn <- RMSE(predict.knn, log10(testSet$CFC))
help(RMSE)
install.packages(httr)
install.packages("httr")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response)
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response)
ggplot(df, aes(x = time, y = cfu))
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
require("jsonlite");
require("httr");
require("ggplot2");
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
require("ggplot2");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
require("ggplot2");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
require("ggplot2");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
require("ggplot2");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
require("jsonlite");
require("httr");
require("ggplot2");
experiment <- "ds001a1";
request <- GET(paste("http://localhost:3000/api/datapoints/", experiment, sep = ''))
response <- content(request, as = "text", encoding = "UTF-8")
df <- fromJSON(response)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
install.packages(growthrates)
install.packages("growthrate")
help("fitspline")
help("fit_spline")
‘??fit_spline’
??fit_spline
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit_splin(time, cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit_spline(time, cfu)
require("jsonlite");
require("httr");
require("ggplot2");
require("growthrates");
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit_spline(time, cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit_spline(df.time, df.cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit_spline(df$time, df$cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit_spline(df$time, df$cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
ggplotline(fit_spline(df$time, df$cfu))
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
ggline(fit_spline(df$time, df$cfu))
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
geom_line(fit_spline(df$time, df$cfu))
ggplot(df, aes(x = time, y = cfu)) +
geom_point()+
fit <- fit_spline(df$time, df$cfu)
ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
plot(fit)
coef(fit) #Report on the growth coefficient
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
fit_easy <- fit_easylinear(df$time, df$cfu)
g <- plot(fit_easy)
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
fit_easy <- fit_easylinear(df$time, df$cfu)
g + plot(fit_easy)
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
fit_easy <- fit_easylinear(df$time, df$cfu)
lines(fit_easy)
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
fit_easy <- fit_easylinear(df$time, df$cfu)
lines(fit_easy)
fit_growthmod <- growthmodel(df$time, df$cfu)
help("growthmodel")
g <- ggplot(df, aes(x = time, y = cfu)) +
geom_point()
fit <- fit_spline(df$time, df$cfu)
g <- plot(fit)
coef(fit) #Report on the growth coefficient
fit_easy <- fit_easylinear(df$time, df$cfu)
lines(fit_easy)
temperatures <- c(0.0, 0.0, 0.0, 5.0, 5.0, 5.0)
times <-c(32.0, 45.0, 46.0, 1.0, 2.0, 4.0)
cfus <- c(4.7, 4.9, 4.5, 2.1, 1.8, 1.6)
temperatures_list <- unique(temperatures)
growth_coef <- c()
for(j in 1:length(temperatures_list)){
times_temp <- c()
cfus_temp <- c()
for(i in 1:length(temperatures)){
if(temperatures == temperatures_list[j]){
times_temp <- append(times_temp, times[i])
cfus_temp <- append(cfus_temp, cfus[i])
}
}
fit <- fit_spline(times_temp, cfus_temp) #times and cfus created vectors
growth_coef <- append(growth_coef, coef(fit)['mumax'])
}
temperatures <- c(0.0, 0.0, 0.0, 5.0, 5.0, 5.0)
times <-c(32.0, 45.0, 46.0, 1.0, 2.0, 4.0)
cfus <- c(4.7, 4.9, 4.5, 2.1, 1.8, 1.6)
temperatures_list <- unique(temperatures)
growth_coef <- c()
for(j in 1:length(temperatures_list)){
times_temp <- c()
cfus_temp <- c()
for(i in 1:length(temperatures)){
if(temperatures[i] == temperatures_list[j]){
times_temp <- append(times_temp, times[i])
cfus_temp <- append(cfus_temp, cfus[i])
}
}
fit <- fit_spline(times_temp, cfus_temp) #times and cfus created vectors
growth_coef <- append(growth_coef, coef(fit)['mumax'])
}
temperatures <- c(0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0)
times <-c(32.0, 45.0, 46.0, 63.0, 1.0, 2.0, 4.0, 7.0)
cfus <- c(4.7, 4.9, 4.5, 5.4, 2.1, 1.8, 1.6, 1.9)
temperatures_list <- unique(temperatures)
growth_coef <- c()
for(j in 1:length(temperatures_list)){
times_temp <- c()
cfus_temp <- c()
for(i in 1:length(temperatures)){
if(temperatures[i] == temperatures_list[j]){
times_temp <- append(times_temp, times[i])
cfus_temp <- append(cfus_temp, cfus[i])
}
}
fit <- fit_spline(times_temp, cfus_temp) #times and cfus created vectors
growth_coef <- append(growth_coef, coef(fit)['mumax'])
}
packages.install(plumber)
install.packages(plumber)
install.packages("plumber")
plumber::plumb("hello_plumber.R")$run(port = 3001)
setwd("C:/Users/marie/Documents/Cranfield/DataIntegration_InteractionNetworks/Pratical3_databases_interface")
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
plumber::plumb("hello_plumber.R")$run(port = 3001)
setwd("C:/Users/marie/Documents/Cranfield/DataIntegration_InteractionNetworks/Assignment/REST-API-service-for-variant-data/REST_API")
plumber::plumb("variant_density.R")$run(port = 3000/0)
plumber::plumb("hello_plumber.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
df
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
df
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3000)
plumber::plumb("variant_density.R")$run(port = 3001)
