/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package databaseparsingpopulation;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;

/**
 *
 * @author marie
 */
public class DatabasePopulating extends javax.swing.JFrame {

    /**
     * Creates new form DatabaseParsing
     */
    public DatabasePopulating() {
        initComponents();
    }
    
    //Database path
    static final String database_file = "C:/Users/marie/Documents/Cranfield/DataIntegration_InteractionNetworks/Assignment/REST-API-service-for-variant-data/Database/variants_database.sqlite";
    
    //File nqme
    public String filePath;
    
    //Set containing primary keys
    static HashSet<String> setGenome = new HashSet<String>();
    static HashSet<String> setVariants = new HashSet<String>();
    static HashSet<String> setInformation = new HashSet<String>();
    static HashSet<String[]> setObservedVariants = new HashSet<String[]>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vcfChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        vcfChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vcfChooserActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Please select vcf file to add to database");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vcfChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vcfChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vcfChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vcfChooserActionPerformed
        //File chosen is not null
        if(vcfChooser.getSelectedFile() != null){
            System.out.println("Choosen file: " + vcfChooser.getSelectedFile());
            filePath = vcfChooser.getSelectedFile().getPath();
        
            //Close window
            this.dispose();
            //Populate database
            populateDB();
        }
        else{
            this.dispose();
        }
    }//GEN-LAST:event_vcfChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public void populateDB(){
        savePrimaryKeys();  
        vcfParser();
    }
    
    public void savePrimaryKeys(){
        try{
            String url = String.format("jdbc:sqlite:%s", database_file);
            
            //Establish connexion
            Connection conn = DriverManager.getConnection(url);
            
            //Get all primary keys from database and save them in sets
            try (Statement stmt = conn.createStatement()) {
                String queryGenome = "SELECT genome_id FROM genomes;";
                String queryVariants = "SELECT variant_id FROM variants;";
                String queryObservedVar = "SELECT variant_id, genome_id FROM variants_observed";
                String queryInfo = "SELECT info_id FROM infos";
                
                //Save chromosomes qurey reults in set
                ResultSet resultGenome = stmt.executeQuery(queryGenome);
                
                while (resultGenome.next()) {
                    setGenome.add(resultGenome.getString(1));
                }
                
                //Save variants query reults in set
                ResultSet resultVariants = stmt.executeQuery(queryVariants);
                
                while (resultVariants.next()) {
                    setVariants.add(resultVariants.getString(1));
                }
                
                //Save observed variants qurey reults in set
                ResultSet resultObservedVar = stmt.executeQuery(queryObservedVar);
                
                while (resultObservedVar.next()) {
                    setObservedVariants.add(new String[] {resultObservedVar.getString(1), resultObservedVar.getString(2)});
                }
                
                //Save information query reults in set
                ResultSet resultInfo = stmt.executeQuery(queryInfo);
                
                while (resultInfo.next()) {
                    setInformation.add(resultInfo.getString(1));
                }

            }
            catch(Exception ex){
                System.out.println(ex);
                System.out.println("Could not execute query to database.");
            }
            System.out.println(setGenome);
            System.out.println(setVariants);
            System.out.println(setObservedVariants);
            System.out.println(setInformation);
            conn.close();
        }
        catch(Exception ex){
            System.out.println(ex);
            System.out.println("Could not connect to the database.");
        }
    }
    
    
    //Retrieve information from vcf file, and parse
    public void vcfParser(){
        BufferedReader buffer = null; //Read the text with a BufferedReader
        String inLine; //A line read from the file
                
        try{
            //Create buffered stream
            buffer = new BufferedReader(new FileReader(filePath));
            //Establish connexion
            String url = String.format("jdbc:sqlite:%s", database_file);
            Connection conn = DriverManager.getConnection(url);
            
            //Read a line and import it to the database
            while((inLine = buffer.readLine()) != null){
                //Line is not a header
                if(!inLine.startsWith("#")){
                    //Split the line
                    String[] variantLine = inLine.split("\t");
                    //Populate the database with the read line
                    populateRowDB(variantLine, conn);
                }
            }
        }
        //File not found
        catch(FileNotFoundException ex){
            System.out.println("File not found " + filePath);
        }
        //Error while reading line or connecting to database
        catch(IOException | SQLException ex){
            System.out.println("Connection to database failed.");
        }
    }
    
    //Populate the database with each line of the file
    public void populateRowDB(String[] variantLine, Connection conn) throws SQLException{
        
    }
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabasePopulating().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JFileChooser vcfChooser;
    // End of variables declaration//GEN-END:variables
}
