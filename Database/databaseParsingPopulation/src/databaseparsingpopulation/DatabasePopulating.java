/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package databaseparsingpopulation;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;

/**
 *
 * @author marie
 */
public class DatabasePopulating extends javax.swing.JFrame {

    /**
     * Creates new form DatabaseParsing
     */
    public DatabasePopulating() {
        initComponents();
    }

    //Database path
    static final String database_file = "C:/Users/marie/Documents/Cranfield/DataIntegration_InteractionNetworks/Assignment/REST-API-service-for-variant-data/Database/variants_database.sqlite";

    //File name
    public String filePath;

    //Set containing primary keys
    static HashSet<Integer> setGenome = new HashSet<Integer>();
    static HashSet<Integer> setVariants = new HashSet<Integer>();
    static HashSet<Integer> setInformation = new HashSet<Integer>();
    static HashSet<Integer[]> setObservedVariants = new HashSet<Integer[]>();
    
    //Queries templates
    static final String GENOME_TEMPLATE = "INSERT INTO genomes (genome_id, genome_name) VALUES (%d, \"%s\");";
    static final String VARIANTS_TEMPLATE = "INSERT INTO variants (var_type, var_subtype, reference, alteration, position, chromosome) VALUES (\"%s\", \"%s\", \"%s\", \"%s\", %d, %d);";
    static final String INFOS_TEMPLATE = "INSERT INTO infos (info_id, info_format, info_values, extra_info) VALUES (%d, \"%s\", \"%s\", \"%s\");";
    static final String VAR_OBSERVED_TEMPLATE = "INSERT INTO variants_observed (variant_id, genome_id, quality, filter, info_id) VALUES (%d, %d, %d, \"%s\",%d);";
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vcfChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        vcfChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vcfChooserActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Please select vcf file to add to database");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vcfChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vcfChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vcfChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vcfChooserActionPerformed
        //File chosen is not null
        if (vcfChooser.getSelectedFile() != null) {
            System.out.println("Choosen file: " + vcfChooser.getSelectedFile());
            filePath = vcfChooser.getSelectedFile().getPath();

            //Close window
            this.dispose();
            //Populate database
            populateDB();
        } else {
            this.dispose();
        }
    }//GEN-LAST:event_vcfChooserActionPerformed

    /**
     * @param args the command line arguments
     */
    private void populateDB() {
        savePrimaryKeys();
        vcfParser();
    }

    private void savePrimaryKeys() {
        try {
            String url = String.format("jdbc:sqlite:%s", database_file);

            //Establish connexion
            Connection conn = DriverManager.getConnection(url);

            //Get all primary keys from database and save them in sets
            try (Statement stmt = conn.createStatement()) {
                String queryGenome = "SELECT genome_id FROM genomes;";
                String queryVariants = "SELECT variant_id FROM variants;";
                String queryObservedVar = "SELECT variant_id, genome_id FROM variants_observed";
                String queryInfo = "SELECT info_id FROM infos";

                //Save chromosomes qurey reults in set
                ResultSet resultGenome = stmt.executeQuery(queryGenome);

                while (resultGenome.next()) {
                    setGenome.add(Integer.parseInt(resultGenome.getString(1)));
                }

                //Save variants query reults in set
                ResultSet resultVariants = stmt.executeQuery(queryVariants);

                while (resultVariants.next()) {
                    setVariants.add(Integer.parseInt(resultVariants.getString(1)));
                }

                //Save observed variants qurey reults in set
                ResultSet resultObservedVar = stmt.executeQuery(queryObservedVar);

                while (resultObservedVar.next()) {
                    setObservedVariants.add(new Integer[]{Integer.parseInt(resultObservedVar.getString(1)), Integer.parseInt(resultObservedVar.getString(2))});
                }

                //Save information query reults in set
                ResultSet resultInfo = stmt.executeQuery(queryInfo);

                while (resultInfo.next()) {
                    setInformation.add(Integer.parseInt(resultInfo.getString(1)));
                }

            } catch (Exception ex) {
                System.out.println(ex);
                System.out.println("Could not execute query to database.");
            }
            conn.close();
        } catch (Exception ex) {
            System.out.println(ex);
            System.out.println("Could not connect to the database.");
        }
    }

    //Retrieve information from vcf file, and parse
    private void vcfParser() {
        BufferedReader buffer = null; //Read the text with a BufferedReader
        String inLine; //A line read from the file
        int genome_id = 0; //Genome id for unknown genomes

        try {
            //Create buffered stream
            buffer = new BufferedReader(new FileReader(filePath));
            //Establish connexion
            String url = String.format("jdbc:sqlite:%s", database_file);
            Connection conn = DriverManager.getConnection(url);

            //Read a line and import it to the database
            while ((inLine = buffer.readLine()) != null) {
                //Line is not a header
                if (!inLine.startsWith("##")) {
                    //Get genome name
                    if (inLine.startsWith("#CHROM")) {
                        String[] header = inLine.split("\t");
                        System.out.println(header[0] + " " + header[1] + " "+ header[2] + " "+ header[3] + " "+ header[9]);
                        genome_id = Integer.parseInt(header[9]);
                    } else {
                        System.out.println(inLine);
                        //Split the line
                        String[] variantLine = inLine.split("\t");
                        //Populate the database with the read line
                        populateRowDB(variantLine, conn, genome_id);
                    }
                }
            }
        } //File not found
        catch (FileNotFoundException ex) {
            System.out.println("File not found " + filePath);
        } //Error while reading line or connecting to database
        catch (IOException | SQLException ex) {
            System.out.println(ex);
            System.out.println("Connection to database failed.");
        }
    }

    //Populate the database with each line of the file
    private void populateRowDB(String[] variantLine, Connection conn, int genome_id) throws SQLException {
        Statement stmt = conn.createStatement();

        //Elements to save in databases
        int chromosome = Integer.parseInt(variantLine[0]);
        int position = Integer.parseInt(variantLine[1]);
        int variant_id = -1;

        //If id exists
        if (!variantLine[2].equals(".")) {
            variant_id = Integer.parseInt(variantLine[2]);
        }

        String reference = variantLine[3];
        String alteration = variantLine[4];
        int quality = Integer.parseInt(variantLine[5]);
        String filter = variantLine[6];
        String extra_info = variantLine[7];
        String info_format = variantLine[8];
        String info_value = variantLine[9];

        //Insert values in table genomes
        //System.out.println(genome_id);
        insertGenomes(stmt, genome_id);
        insertVariants(conn.createStatement(), variant_id, reference, alteration, position, chromosome);
        //insertInformation(stmt, info_format, info_value, extra_info);
        
        
    }

    private void insertGenomes(Statement stmt, int genome_id) throws SQLException {
        //Primary key genome_id is unique, but genome name is also unique (associated to the id)
        if(!setGenome.contains(genome_id)){
            //Create genome name
            String genome_name = new String("genome_" + genome_id);
            //Create sql query based on constant template
            String query = String.format(GENOME_TEMPLATE, genome_id, genome_name);
            //Execute query
            stmt.execute(query);
            //Add genome names and ids to the set
            setGenome.add(genome_id);
        }
    }
    
    private void insertVariants(Statement stmt, int variant_id, String reference, String alteration, int position, int chromosome) throws SQLException {
        //If no variant id given in vcf file, create one
        /*
        if(variant_id == -1){
            ResultSet rs = stmt.getGeneratedKeys(); //Generated key
            variant_id = rs.getInt(1);
            System.out.println(variant_id);
        }
        */
        //If unique id (primary key) does not already exist
        if(!setVariants.contains(variant_id)){
            //Determine variant type
            String type = variantType(alteration, reference)[0];
            String subtype = variantType(alteration, reference)[1];
            //Create sql query based on constant template
            String query = String.format(VARIANTS_TEMPLATE, type, subtype, reference, alteration, position, chromosome);
            //Execute query
            stmt.execute(query);
            
            //Add identifier
            ResultSet rs = stmt.getGeneratedKeys(); //Generated key
            variant_id = rs.getInt(1);
            stmt.execute("INSERT INTO variants(variant_id) VALUES (" + variant_id + ");");
            System.out.println("variant id: " + variant_id);
            //Add genome names and ids to the set
            setVariants.add(variant_id);
        }
    }
    
    private void insertInformation(Statement stmt, String info_format, String info_value, String extra_info) throws SQLException {
        //Generate primary key
        //ResultSet rs = stmt.getGeneratedKeys(); //Generated key
        //int info_id = rs.getInt(1);
        int info_id = 1;
        
        //If unique id (primary key) does not already exist
        if(!setVariants.contains(info_id)){
            //Create sql query based on constant template
            String query = String.format(INFOS_TEMPLATE, info_id, info_format, info_value, extra_info);
            //Execute query
            stmt.execute(query);
            //Add genome names and ids to the set
            setVariants.add(info_id);
        }
    }
    
    public String[] variantType(String alt, String ref){
        if(ref.length() == alt.length()) //Same length: SNP
            return(new String[]{"SNP", ""});
        else if(ref.length() > alt.length())
            return(new String[]{"InDel", "Deletion"});
        else if(ref.length() < alt.length())
            return(new String[]{"InDel", "Insertion"});
        else
            return(new String[]{"", ""});
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabasePopulating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabasePopulating().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JFileChooser vcfChooser;
    // End of variables declaration//GEN-END:variables
}
